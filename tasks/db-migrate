#!/usr/bin/env php
<?php

ini_set('error_reporting', E_ALL);
ini_set('log_errors', 'On');

migrate([
  'blogIds' => ['1', '8', '9'],
  'from' => 'foo.example.com',
  'to' => 'bar.example.com',
  'fromBucket' => 'foo-bucket',
  'toBucket' => 'bar-bucket',
  'postGuidFilter' => 'http://foo.example.com/%',
  'dbConfig' => getWpConfig('wordpress/html/wp-config.php', [
    'DB_NAME',
    'DB_USER',
    'DB_PASSWORD',
    'DB_HOST'
  ])
]);

///////////////////////////////////////////////////////////////////////////////

function migrate($options) {
  $dbConfig = $options['dbConfig'];
  $db = new PDO(
    "mysql:dbname=${dbConfig['DB_NAME']};host=${dbConfig['DB_HOST']}",
    $dbConfig['DB_USER'],
    $dbConfig['DB_PASSWORD']
  );

  $results = [];
  foreach ($options['blogIds'] as $blogId) {
    $postmetaTable = $blogId === '1' ? 'wp_postmeta' : "wp_${blogId}_postmeta";
    $postsTable = $blogId === '1' ? 'wp_posts' : "wp_${blogId}_posts";

    echo "Migrating blogId: '${blogId}'", PHP_EOL;
    printBlogMigrationResults([
      'Postmata' => migratePostmeta($db, $postmetaTable, $options),
      'Posts' => migratePosts($db, $postsTable, $options)
    ]);
    echo '---', PHP_EOL;
  }
}

function printBlogMigrationResults($results) {
  foreach ($results as $title => $result) {
    $resultStr = $result === 0 ? 'Nothing to update' : 'Updated: ' . $result;
    echo $title, ': ', PHP_EOL, 'Ëª', $resultStr, PHP_EOL;
  }
}

function getWpConfig($configPath, array $constants) {
  preg_match_all(
    '/^\s*define\([\s\'"]+(.+)[\s\'"]+,[\s\'"]+(.+)[\s\'"]+\);\s*$/m',
    file_get_contents($configPath),
    $constantsMatch,
    PREG_SET_ORDER
  );

  $config = [];
  foreach ($constantsMatch as $constantMeta) {
    list(, $name, $value) = $constantMeta;
    if (!in_array($name, $constants)) continue;
    $config[$name] = $value;
  }

  return $config;
}

function migratePostmeta($db, $table, $options) {
  $sql = "
    select
      meta_id,
      meta_value
    from
      `${table}`
    where
      meta_value LIKE :valueFilter
    ;
  ";

  $stmt = $db->prepare($sql);
  $stmt->execute(array(
    ':valueFilter' => 'a:%'
  ));

  $affectedRows = 0;

  while (list($metaId, $metaValue) = $stmt->fetch(PDO::FETCH_NUM)) {
    $metaValue = @unserialize($metaValue);
    if (!$metaValue) continue;

    $updated = false;
    $metaValue = mapPostmeta($metaValue, $updated, $options);

    if ($updated) {
      $affectedRows += savePostmeta($db, $table, $postmeta);
    }
  }

  return $affectedRows;
}

function savePostmeta($db, $table, $metaId,  $postmeta) {
  $postmeta = serialize($postmeta);
  $sql = "
    UPDATE
      `${table}`
    SET
      meta_value = :metaValue
    WHERE
      meta_id = :metaId
  ";

  return $db
    ->prepare($sql)
    ->execute(array(
      ':metaValue' => $postmeta,
      ':metaId' => $metaId
    ));
}

function mapPostmeta($meta, &$updated, $options) {
  if (
    array_key_exists('bucket', $meta)
    && $meta['bucket'] === $options['fromBucket']
  ) {
    $meta['bucket'] = $options['toBucket'];
    $updated = true;
  }

  return $meta;
}

function migratePosts($db, $table, $options) {
  $sql = "
    UPDATE
      `${table}`
    SET
      guid = replace(guid, :from, :to)
    WHERE
      guid LIKE :guidFilter
  ";

  $from = "//${options['from']}/";
  $to = "//${options['to']}/";
  $guidFilter = "http://${options['from']}/%";

  return $db
    ->prepare($sql)
    ->execute(array(
      ':from' => $from,
      ':to' => $to,
      ':guidFilter' => $guidFilter
    ));
}
